
#include "SetNmeaLoggerSentences.h"

#include "command_factory.h"
#include "parse_json.hpp"

///
/// Definition of SetNmeaLoggerSentences
///

namespace Sdx
{
  namespace Cmd
  {
    const char* const SetNmeaLoggerSentences::CmdName = "SetNmeaLoggerSentences";
    const char* const SetNmeaLoggerSentences::Documentation = "Set the NMEA sentences that will be generated by the logger.\n"
      "\n"
      "Name      Type         Description\n"
      "--------- ------------ -------------------------------------------------------------------------------------------------------\n"
      "Sentences array string Identifiers of the NMEA sentences to generate, only \"GGA\", \"GLL\", \"GSV\", \"RMC\" and \"ZDA\" are supported.";
    const char* const SetNmeaLoggerSentences::TargetId = "";

    REGISTER_COMMAND_TO_FACTORY_DECL(SetNmeaLoggerSentences);
    REGISTER_COMMAND_TO_FACTORY_IMPL(SetNmeaLoggerSentences);


    SetNmeaLoggerSentences::SetNmeaLoggerSentences()
      : CommandBase(CmdName, TargetId)
    {}

    SetNmeaLoggerSentences::SetNmeaLoggerSentences(const std::vector<std::string>& sentences)
      : CommandBase(CmdName, TargetId)
    {

      setSentences(sentences);
    }

    SetNmeaLoggerSentencesPtr SetNmeaLoggerSentences::create(const std::vector<std::string>& sentences)
    {
      return std::make_shared<SetNmeaLoggerSentences>(sentences);
    }

    SetNmeaLoggerSentencesPtr SetNmeaLoggerSentences::dynamicCast(CommandBasePtr ptr)
    {
      return std::dynamic_pointer_cast<SetNmeaLoggerSentences>(ptr);
    }

    bool SetNmeaLoggerSentences::isValid() const
    {
      
        return m_values.IsObject()
          && parse_json<std::vector<std::string>>::is_valid(m_values["Sentences"])
        ;

    }

    std::string SetNmeaLoggerSentences::documentation() const { return Documentation; }

    const std::vector<std::string>& SetNmeaLoggerSentences::fieldNames() const 
    { 
      static const std::vector<std::string> names {"Sentences"}; 
      return names; 
    }


    int SetNmeaLoggerSentences::executePermission() const
    {
      return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING;
    }


    std::vector<std::string> SetNmeaLoggerSentences::sentences() const
    {
      return parse_json<std::vector<std::string>>::parse(m_values["Sentences"]);
    }

    void SetNmeaLoggerSentences::setSentences(const std::vector<std::string>& sentences)
    {
      m_values.AddMember("Sentences", parse_json<std::vector<std::string>>::format(sentences, m_values.GetAllocator()), m_values.GetAllocator());
    }


  }
}
